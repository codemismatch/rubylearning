#!/usr/bin/env ruby

# Typophic-serve: Serve a Typophic site locally
#
# Usage: typophic-serve [--port PORT] [--build]

require 'optparse'
require 'socket'

# Parse command line options
options = {
  port: 8000,
  build: false,
  host: 'localhost'
}

OptionParser.new do |opts|
  opts.banner = "Usage: typophic-serve [options]"
  
  opts.on("--port PORT", Integer, "Port to serve on (default: 8000)") do |port|
    options[:port] = port
  end
  
  opts.on("--build", "Build the site before serving") do
    options[:build] = true
  end
  
  opts.on("--host HOST", "Host to bind to (default: localhost)") do |host|
    options[:host] = host
  end
  
  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end.parse!

puts "==== Typophic: Local Server ===="

# Build the site if requested
if options[:build]
  puts "\n=== Building site ==="
  build_script = File.join(File.dirname(__FILE__), 'typophic-build')
  if File.exist?(build_script)
    system(build_script)
  else
    puts "Warning: Could not find typophic-build script. Using basic build."
    typophic_script = File.join(File.dirname(__FILE__), 'typophic')
    if File.exist?(typophic_script)
      system(typophic_script)
    else
      puts "Error: Could not find typophic script. Please build the site first."
      exit 1
    end
  end
end

# Check if public directory exists
unless Dir.exist?("public")
  puts "Error: The 'public' directory does not exist. Please build the site first."
  exit 1
end

# Serve the site using Python's built-in HTTP server
puts "\n=== Starting local server ==="
puts "Server running at http://#{options[:host]}:#{options[:port]}"
puts "Press Ctrl+C to stop the server"
puts

# Create .htaccess file to solve path issues with assets
File.write("public/.htaccess", <<~HTACCESS)
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.html [L]
HTACCESS

Dir.chdir("public") do
  begin
    # Use Python3 if available
    python_cmd = system("which python3 > /dev/null 2>&1") ? "python3" : "python"
    # Start server with correct host binding
    system("#{python_cmd} -m http.server #{options[:port]} --bind #{options[:host]}")
  rescue Interrupt
    puts "\nServer stopped."
  end
end
