#!/usr/bin/env ruby

# Enhanced Typophic-deploy: Unified deployment system for Ruby Learning
#
# Usage: typophic-deploy [--local] [--remote URL] [--force] [--fix-only] [--build-only] [--custom-domain DOMAIN]

require 'fileutils'
require 'optparse'
require 'yaml'

# Function to load config.yml
def load_config
  config_file = File.join(Dir.pwd, 'config.yml')
  if File.exist?(config_file)
    begin
      YAML.load_file(config_file)
    rescue => e
      puts "Warning: Error loading config.yml: #{e.message}"
      {}
    end
  else
    puts "Warning: config.yml not found"
    {}
  end
end

# Function to find a script file
def find_script(name)
  # Check in bin directory first
  bin_path = File.join(File.dirname(__FILE__), name)
  return bin_path if File.exist?(bin_path)
  
  # Check in tools directory
  tools_path = File.join(Dir.pwd, 'tools', name)
  return tools_path if File.exist?(tools_path)
  
  # Check in root directory
  root_path = File.join(Dir.pwd, name)
  return root_path if File.exist?(root_path)
  
  # Not found
  nil
end

# Load configuration
config = load_config

# Get repository URL from config if available
repo_url = config.dig('repository', 'url')

# First try to get base path from site_name in config.yml
base_repo_name = config['site_name']&.downcase&.gsub(/\s+/, '') if config['site_name']


# If no site_name or it's empty, try to extract repo name from URL for base path
if !base_repo_name && repo_url && repo_url =~ /github\.com[:\/]([^\/]+)\/([^\/\.]+)(\.git)?$/
  username = $1
  base_repo_name = $2
end

# Parse command line options
options = {
  force: false,
  remote: repo_url,  # Default to the URL from config.yml
  mode: :github,     # Default to GitHub Pages deployment
  fix_only: false,
  build_only: false,
  custom_domain: nil,
  port: 3000,
  base_repo_name: base_repo_name
}

OptionParser.new do |opts|
  opts.banner = "Usage: typophic-deploy [options]"
  
  opts.on("--force", "Force push to GitHub Pages") do
    options[:force] = true
  end
  
  opts.on("--remote URL", "GitHub repository URL (overrides config.yml)") do |url|
    options[:remote] = url
    # Update base_repo_name if remote URL changes
    if url =~ /github\.com[:\/]([^\/]+)\/([^\/\.]+)(\.git)?/
      options[:base_repo_name] = $2
    end
  end
  
  opts.on("--base-path PATH", "Base path for GitHub Pages (default: site_name from config.yml or repository name)") do |path|
    options[:base_repo_name] = path
  end
  
  opts.on("--local", "Deploy for local development") do
    options[:mode] = :local
  end
  
  opts.on("--fix-only", "Only fix paths without building or deploying") do
    options[:fix_only] = true
  end
  
  opts.on("--build-only", "Only build site without deploying") do
    options[:build_only] = true
  end
  
  opts.on("--custom-domain DOMAIN", "Set a custom domain") do |domain|
    options[:custom_domain] = domain
  end
  
  opts.on("--port PORT", Integer, "Port for local server (default: 3000)") do |port|
    options[:port] = port
  end
  
  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end.parse!

deploy_mode = options[:mode] == :local ? "local development" : "GitHub Pages"
puts "==== Typophic: Enhanced Deployment System ===="
puts "Mode: #{deploy_mode}"

# Print repository info if available
if options[:remote] && options[:mode] == :github
  puts "Repository URL: #{options[:remote]}"
  puts "Deploy Branch: #{config.dig('repository', 'deploy_branch') || 'gh-pages'}"
  if options[:base_repo_name]
    puts "Base Path for GitHub Pages: /#{options[:base_repo_name]}/"
  else
    puts "Warning: Could not determine base path from repository URL"
    puts "Assets might not load correctly on GitHub Pages"
  end
end

# Set environment variable for templates
ENV["DEPLOY_ENV"] = options[:mode].to_s

# Skip building if fix_only option is set
unless options[:fix_only]
  # 1. Build the site for deployment
  puts "\n=== Step 1: Building site for deployment ==="
  build_script = File.join(File.dirname(__FILE__), 'typophic-build')
  if File.exist?(build_script)
    system("#{build_script} --deploy")
  else
    puts "Error: Could not find typophic-build script at #{build_script}"
    exit 1
  end
end

# 2. Fix paths based on deployment mode
puts "\n=== Step 2: Fixing paths for #{deploy_mode} ==="

# Implement path fixing directly in this script
if options[:mode] == :local
  base_path = ""
  mode_name = "local development"
else
  if options[:base_repo_name]
    base_path = "/#{options[:base_repo_name]}"
  else
    base_path = ""
    puts "Warning: Using empty base path for GitHub Pages - assets might not load correctly"
  end
  mode_name = "GitHub Pages"
end

puts "Using base path: #{base_path || '/'}"

# Fix HTML files
puts "Fixing HTML files..."
Dir.glob("public/**/*.html").each do |file|
  # Skip if it's a directory
  next if File.directory?(file)
  
  content = File.read(file)
  
  # Fix unprocessed ERB template variables
  # Replace <%= base_path %> with the actual path
  content.gsub!(/<%=\s*base_path\s*%>/, base_path)
  
  # Handle base tag depending on mode
  if options[:mode] == :local
    # For local: remove base tag or set to root
    if content.include?('<base href=')
      content.gsub!(/<base href=["'][^"']*["']>/, '<base href="/">')
      puts "  - Updated base tag for local in: #{file}"
    end
  else
    # For GitHub: ensure correct base tag
    if !content.include?('<base href=') && content.include?('<head>')
      content.gsub!('<head>', "<head>\n  <base href=\"#{base_path}/\">")
      puts "  - Added base tag to: #{file}"
    elsif content.include?('<base href=')
      content.gsub!(/<base href=["'][^"']*["']>/, "<base href=\"#{base_path}/\">")
      puts "  - Updated base tag for GitHub in: #{file}"
    end
  end
  
  # Handle links and script paths
  if options[:mode] == :local
    # For local: use root-relative paths
    content = content.gsub(/href=["']((?!http|https|\/\/|#|mailto:)[^"']*)["']/) do |match|
      path = $1
      # Don't modify already root-relative paths that start with /
      if path.start_with?('/')
        match
      else
        # Make root-relative
        "href=\"/#{path}\""
      end
    end
    
    # Do the same for src attributes
    content = content.gsub(/src=["']((?!http|https|\/\/|#|data:)[^"']*)["']/) do |match|
      path = $1
      if path.start_with?('/')
        match
      else
        "src=\"/#{path}\""
      end
    end
  else
    # For GitHub: prefix with BASE_PATH
    # First fix absolute paths
    content = content.gsub(/href=["']\/(?!http|https|\/\/|#|mailto:)([^"']*)["']/) do |match|
      "href=\"#{base_path}/#{$1}\""
    end
    
    content = content.gsub(/src=["']\/(?!http|https|\/\/|#|data:)([^"']*)["']/) do |match|
      "src=\"#{base_path}/#{$1}\""
    end
    
    # Then fix relative paths
    content = content.gsub(/href=["']((?!http|https|\/\/|#|mailto:|\/)[^"']*)["']/) do |match|
      "href=\"#{base_path}/#{$1}\""
    end
    
    content = content.gsub(/src=["']((?!http|https|\/\/|#|data:|\/)[^"']*)["']/) do |match|
      "src=\"#{base_path}/#{$1}\""
    end
  end
  
  # Write back the file
  File.write(file, content)
  puts "  - Updated paths in: #{file}"
end

# Fix CSS files (url() references)
puts "Fixing CSS files..."
Dir.glob("public/**/*.css").each do |file|
  # Skip if it's a directory
  next if File.directory?(file)
  
  content = File.read(file)
  
  if options[:mode] == :local
    # For local: use root-relative paths in CSS
    updated_content = content.gsub(/url\(["']?((?!http|https|\/\/|data:|#)[^\/][^\)'"]*)["']?\)/) do |match|
      path = $1
      "url(/#{path})"
    end
  else
    # For GitHub: prefix with BASE_PATH
    updated_content = content
      .gsub(/url\(["']?\/(?!http|https|\/\/|#)([^\)'"]*?)["']?\)/, "url(#{base_path}/\\1)")
      
    # Also fix relative paths
    updated_content = updated_content
      .gsub(/url\(["']?((?!http|https|\/\/|#|#{base_path})[^\/][^\)'"]*)["']?\)/, "url(#{base_path}/\\1)")
  end
    
  if content != updated_content
    File.write(file, updated_content)
    puts "  - Updated paths in: #{file}"
  end
end

puts "Path fixing completed!"

# Create a debug info file to help troubleshoot path issues
puts "Creating debug info file..."
File.write("public/path-debug.html", <<~HTML)
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Path Debug Info</title>
  <base href="#{base_path}/">
  <style>
    body { font-family: monospace; padding: 20px; }
    h1 { color: #333; }
    pre { background: #f5f5f5; padding: 10px; border-radius: 5px; overflow-x: auto; }
    .success { color: green; }
    .error { color: red; }
  </style>
</head>
<body>
  <h1>Path Debug Information</h1>
  <p>This file was created to help diagnose path issues with GitHub Pages deployment.</p>
  
  <h2>Deployment Configuration</h2>
  <pre>
Mode: #{deploy_mode}
Base Path: #{base_path || '/'}
Repository URL: #{options[:remote] || 'Not specified'}
Repo Name: #{options[:base_repo_name] || 'Could not determine'}
Deploy Branch: #{config.dig('repository', 'deploy_branch') || 'gh-pages'}
  </pre>
  
  <h2>Asset Tests</h2>
  <p>CSS test: <span id="css-test">Not loaded</span></p>
  <p>JavaScript test: <span id="js-test">Not loaded</span></p>
  
  <h2>Absolute Path Links</h2>
  <ul>
    <li><a href="/css/style.css">Absolute: /css/style.css</a></li>
    <li><a href="/js/prism.js">Absolute: /js/prism.js</a></li>
    <li><a href="/index.html">Absolute: /index.html</a></li>
  </ul>
  
  <h2>Path-corrected Links</h2>
  <ul>
    <li><a href="#{base_path}/css/style.css">Corrected: #{base_path}/css/style.css</a></li>
    <li><a href="#{base_path}/js/prism.js">Corrected: #{base_path}/js/prism.js</a></li>
    <li><a href="#{base_path}/index.html">Corrected: #{base_path}/index.html</a></li>
  </ul>
  
  <h2>Relative Path Links</h2>
  <ul>
    <li><a href="css/style.css">Relative: css/style.css</a></li>
    <li><a href="js/prism.js">Relative: js/prism.js</a></li>
    <li><a href="index.html">Relative: index.html</a></li>
  </ul>
  
  <style>
    #css-test { color: green; }
  </style>
  
  <script>
    // Test if JS is loading
    document.getElementById('css-test').textContent = 'CSS loaded successfully!';
    document.getElementById('js-test').textContent = 'JavaScript loaded successfully!';
    
    // Log path info to console
    console.log('Path Debug Info:');
    console.log('Base Path:', '#{base_path}');
    console.log('Current URL:', window.location.href);
    console.log('Document Base URL:', document.baseURI);
  </script>
</body>
</html>
HTML

# 3. Set custom domain if specified
if options[:custom_domain]
  puts "\n=== Step 3: Setting custom domain: #{options[:custom_domain]} ==="
  File.write("public/CNAME", options[:custom_domain])
  puts "Created CNAME file with domain: #{options[:custom_domain]}"
end

# Exit if only building or fixing
exit if options[:build_only] || options[:fix_only]

# Handle remaining steps based on deployment mode
if options[:mode] == :local
  # 4. Start local server
  puts "\n=== Step 4: Starting local server on port #{options[:port]} ==="
  serve_script = File.join(File.dirname(__FILE__), 'typophic-serve')
  if File.exist?(serve_script)
    system("#{serve_script} --port #{options[:port]}")
  else
    puts "No serve script found. Starting simple Ruby server..."
    Dir.chdir("public") do
      system("ruby -run -e httpd . -p #{options[:port]}")
    end
  end
else
  # Use deploy branch from config if available, otherwise default to gh-pages
  deploy_branch = config.dig('repository', 'deploy_branch') || 'gh-pages'
  
  # 4. Prepare the Git repository for GitHub Pages
  puts "\n=== Step 4: Preparing Git repository (#{deploy_branch} branch) ==="

  # Check if repository URL is available
  if !options[:remote]
    puts "Error: No repository URL specified."
    puts "Please specify repository URL with --remote option or add it to config.yml:"
    puts "  repository:"
    puts "    url: git@github.com:username/repo.git"
    exit 1
  end

  # Initialize git repository in public directory if not already
  if !Dir.exist?("public/.git")
    puts "Initializing git repository in public directory..."
    Dir.chdir("public") do
      system("git init")
      system("git checkout -b #{deploy_branch}")  # GitHub Pages branch
    end
  else
    puts "Git repository already exists in public directory"
    Dir.chdir("public") do
      system("git checkout #{deploy_branch} 2>/dev/null || git checkout -b #{deploy_branch}")
    end
  end

  # 5. Set remote
  puts "\n=== Step 5: Setting up remote repository ==="
  Dir.chdir("public") do
    system("git remote remove origin 2>/dev/null")  # Remove existing remote if any
    system("git remote add origin #{options[:remote]}")
    puts "Remote set to: #{options[:remote]}"
  end

  # 6. Commit and push
  puts "\n=== Step 6: Committing and pushing changes ==="
  Dir.chdir("public") do
    # Stage all files
    system("git add .")
    
    # Commit with more detailed message including the base path
    commit_message = "Deploy Typophic site with base path '#{base_path}' on #{Time.now.strftime('%Y-%m-%d %H:%M:%S')}"
    system("git commit -m \"#{commit_message}\"")
    
    # Push
    force_option = options[:force] ? "-f" : ""
    puts "Pushing to #{deploy_branch} branch#{options[:force] ? ' (force push)' : ''}..."
    
    result = system("git push #{force_option} origin #{deploy_branch}")
    
    if result
      puts "Successfully pushed to #{deploy_branch} branch!"
    else
      puts "Error: Failed to push to #{deploy_branch} branch."
      puts "If this is your first push, check your repository URL and access permissions."
      exit 1
    end
  end

  puts "\n==== Deployment Complete ===="
  
  # Extract username/repo from the repository URL
  # Handle both formats: git@github.com:username/repo.git and https://github.com/username/repo.git
  repo_info = nil
  if options[:remote] =~ /github\.com[:\/]([^\/]+)\/([^\/\.]+)(\.git)?/
    username = $1
    repo_name = $2
    
    if options[:custom_domain]
      puts "Your site has been deployed to GitHub Pages with custom domain: #{options[:custom_domain]}"
      puts "You'll need to configure your domain DNS settings to point to GitHub Pages."
    else
      puts "Your site has been deployed to GitHub Pages!"
      puts "It should be available at: https://#{username}.github.io/#{repo_name}/"
      puts "To diagnose path issues, visit: https://#{username}.github.io/#{repo_name}/path-debug.html"
    end
  else
    puts "Your site has been deployed to GitHub Pages!"
    if options[:custom_domain]
      puts "It should be available at your custom domain: #{options[:custom_domain]}"
    else
      puts "Check your GitHub repository settings for the URL."
    end
  end
end
