#!/usr/bin/env ruby

# Typophic-fix: Fix common issues in a Typophic site
#
# Usage: typophic-fix [--tutorials] [--templates] [--all]

require 'optparse'
require 'fileutils'

# Parse command line options
options = {
  fix_tutorials: false,
  fix_templates: false,
  fix_links: false,
  fix_all: false
}

OptionParser.new do |opts|
  opts.banner = "Usage: typophic-fix [options]"
  
  opts.on("--tutorials", "Fix tutorials.html directory issue") do
    options[:fix_tutorials] = true
  end
  
  opts.on("--templates", "Fix unprocessed template variables") do
    options[:fix_templates] = true
  end
  
  opts.on("--links", "Fix broken links") do
    options[:fix_links] = true
  end
  
  opts.on("--all", "Fix all common issues") do
    options[:fix_all] = true
  end
  
  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end.parse!

# Set fix_all as default if no options are specified
if !options[:fix_tutorials] && !options[:fix_templates] && !options[:fix_links] && !options[:fix_all]
  options[:fix_all] = true
end

# Apply fix_all if specified
if options[:fix_all]
  options[:fix_tutorials] = true
  options[:fix_templates] = true
  options[:fix_links] = true
end

puts "==== Typophic: Fixing common issues ===="

# Fix tutorials.html directory issue
if options[:fix_tutorials]
  puts "\n=== Fixing tutorials.html directory issue ==="
  
  if Dir.exist?("public/tutorials.html")
    # Create tutorials directory if it doesn't exist
    FileUtils.mkdir_p("public/tutorials") unless Dir.exist?("public/tutorials")
    
    # Copy the content if it exists
    if File.exist?("public/tutorials.html/index.html")
      FileUtils.cp("public/tutorials.html/index.html", "public/tutorials/index.html")
      puts "  - Copied tutorials.html/index.html to tutorials/index.html"
    end
    
    # Create redirect file content
    redirect_content = <<~HTML
      <!DOCTYPE html>
      <html>
      <head>
        <meta http-equiv="refresh" content="0;url=/tutorials/">
        <title>Redirecting...</title>
      </head>
      <body>
        <p>Redirecting to <a href="/tutorials/">tutorials</a>...</p>
      </body>
      </html>
    HTML
    
    # Need to create a temporary file since we can't directly replace a directory with a file
    temp_file = "public/tutorials.html.new"
    File.write(temp_file, redirect_content)
    
    # Remove the directory
    FileUtils.rm_rf("public/tutorials.html")
    
    # Move the temporary file to replace the directory
    FileUtils.mv(temp_file, "public/tutorials.html")
    
    puts "✓ Fixed tutorials.html issue"
  else
    puts "✓ No tutorials.html directory issue found"
  end
end

# Fix unprocessed template variables
if options[:fix_templates]
  puts "\n=== Fixing unprocessed template variables ==="
  
  # Count fixed files
  fixed_files = 0
  
  Dir.glob("public/**/*.html").each do |file|
    next if File.directory?(file)
    
    begin
      content = File.read(file)
      original_content = content.dup
      
      # Replace common template variables
      content.gsub!(/<%=\s*base_path\s*%>/, '')
      content.gsub!(/<%=\s*Time\.now\.year\s*%>/, Time.now.year.to_s)
      content.gsub!(/<%=\s*site\.name\s*%>/, 'Ruby Learning')
      content.gsub!(/<%=\s*page\.title\s*%>/, 'Ruby Learning')
      content.gsub!(/<%=\s*page\.description\s*%>/, 'A Ruby Learning site')
      content.gsub!(/<%=\s*content\s*%>/, '') # This shouldn't normally happen
      
      # Handle more complex ERB tags
      content.gsub!(/<%.*?%>/, '') # Remove any remaining ERB tags
      
      # Write back if changed
      if content != original_content
        File.write(file, content)
        fixed_files += 1
        puts "  - Fixed template variables in: #{file}"
      end
    rescue => e
      puts "  ! Error processing template variables in #{file}: #{e.message}"
    end
  end
  
  if fixed_files > 0
    puts "✓ Fixed template variables in #{fixed_files} files"
  else
    puts "✓ No unprocessed template variables found"
  end
end

# Fix broken links if requested
if options[:fix_links]
  puts "\n=== Fixing broken links ==="
  fix_links_script = File.join(File.dirname(__FILE__), 'fix-links.rb')
  if File.exist?(fix_links_script)
    system("ruby #{fix_links_script}")
  else
    puts "  ! Could not find fix-links.rb script"
  end
end

# Final step - run the path fixer for local development
fix_paths_script = File.join(File.dirname(__FILE__), 'fix-paths.rb')
if File.exist?(fix_paths_script)
  puts "\n=== Running path fixer for local development ==="
  system("ruby #{fix_paths_script} --local")
else
  puts "\n! Could not find fix-paths.rb script"
end

puts "\n==== Fixes complete! ===="
puts "Your site should now work correctly on a local development server."
puts "To start a local server, run: bin/typophic-serve"
