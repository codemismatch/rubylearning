#!/usr/bin/env ruby

# Typophic-build: Build a Typophic site with all optimizations
#
# Usage: typophic-build [options]

require 'fileutils'
require 'optparse'

# Parse command line options
$options = {
  clean: true,
  verbose: true,
  deploy: false
}

OptionParser.new do |opts|
  opts.banner = "Usage: typophic-build [options]"
  
  opts.on("--no-clean", "Skip cleaning the public directory before building") do
    $options[:clean] = false
  end
  
  opts.on("-q", "--quiet", "Suppress detailed output") do
    $options[:verbose] = false
  end
  
  opts.on("--deploy", "Prepare the site for deployment") do
    $options[:deploy] = true
  end
  
  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end.parse!

def log(msg)
  puts msg if $options[:verbose]
end

# Fix tutorials.html directory issue if it exists
def fix_tutorials_directory
  if Dir.exist?("public/tutorials.html")
    log "Fixing tutorials.html directory issue..."
    
    # Create tutorials directory if it doesn't exist
    FileUtils.mkdir_p("public/tutorials") unless Dir.exist?("public/tutorials")
    
    # Copy the content if it exists
    if File.exist?("public/tutorials.html/index.html")
      FileUtils.cp("public/tutorials.html/index.html", "public/tutorials/index.html")
      log "  - Copied tutorials.html/index.html to tutorials/index.html"
    end
    
    # Create redirect file content
    redirect_content = <<~HTML
      <!DOCTYPE html>
      <html>
      <head>
        <meta http-equiv="refresh" content="0;url=/tutorials/">
        <title>Redirecting...</title>
      </head>
      <body>
        <p>Redirecting to <a href="/tutorials/">tutorials</a>...</p>
      </body>
      </html>
    HTML
    
    # Need to create a temporary file since we can't directly replace a directory with a file
    temp_file = "public/tutorials.html.new"
    File.write(temp_file, redirect_content)
    
    # Remove the directory
    FileUtils.rm_rf("public/tutorials.html")
    
    # Move the temporary file to replace the directory
    FileUtils.mv(temp_file, "public/tutorials.html")
    
    log "  - Fixed tutorials.html issue"
  end
end

# Build the site with Typophic
deploy_mode = $options[:deploy] ? " for deployment" : ""
log "==== Typophic: Full Build#{deploy_mode} ===="

# Step 1: Clean the public directory if needed
if $options[:clean] && Dir.exist?("public")
  log "\n=== Cleaning public directory ==="
  FileUtils.rm_rf(Dir.glob("public/*"))
end

# Step 2: Run the basic build
log "\n=== Building site with Typophic ==="
typophic_script = File.join(File.dirname(__FILE__), 'typophic')
if File.exist?(typophic_script)
  system(typophic_script)
else
  log "Error: Could not find typophic script."
  exit 1
end

# Fix templates issue immediately after building
log "\n=== Fixing template variables ==="
Dir.glob("public/**/*.html").each do |file|
  next if File.directory?(file)
  
  begin
    content = File.read(file)
    original_content = content.dup
    
    # Replace common template variables
    content.gsub!(/<%=\s*base_path\s*%>/, '')
    content.gsub!(/<%=\s*Time\.now\.year\s*%>/, Time.now.year.to_s)
    content.gsub!(/<%=\s*site\.name\s*%>/, 'Ruby Learning')
    content.gsub!(/<%=\s*page\.title\s*%>/, 'Ruby Learning')
    content.gsub!(/<%=\s*page\.description\s*%>/, 'A Ruby Learning site')
    content.gsub!(/<%=\s*content\s*%>/, '') # This shouldn't normally happen
    
    # Handle more complex ERB tags
    content.gsub!(/<%.*?%>/, '') # Remove any remaining ERB tags
    
    # Write back if changed
    if content != original_content
      File.write(file, content)
      log "  - Fixed template variables in: #{file}"
    end
  rescue => e
    log "  ! Error processing template variables in #{file}: #{e.message}"
  end
end

# Step 3: Ensure proper asset paths
log "\n=== Ensuring correct asset paths ==="

# Create the necessary directories in public if they don't exist
['css', 'js', 'images'].each do |dir|
  unless Dir.exist?("public/#{dir}")
    FileUtils.mkdir_p("public/#{dir}")
    log "Created directory: public/#{dir}"
  end
end

# Copy all CSS files
log "Copying CSS files..."
Dir.glob("templates/css/*.css").each do |file|
  target = "public/css/#{File.basename(file)}"
  FileUtils.cp(file, target)
  log "  - #{file} -> #{target}"
end

# Copy all JS files
log "Copying JavaScript files..."
# Ensure prism.js files are copied
log "Specifically ensuring prism.js files are copied..."
['prism.js', 'prism-ruby.js', 'prism-markdown.js'].each do |js_file|
  template_js_file = File.join("templates/js", js_file)
  public_js_file = File.join("public/js", js_file)
  if File.exist?(template_js_file)
    FileUtils.cp(template_js_file, public_js_file)
    log "  - Copied #{js_file} from templates to public"
  end
end

Dir.glob("templates/js/*.js").each do |file|
  target = "public/js/#{File.basename(file)}"
  FileUtils.cp(file, target)
  log "  - #{file} -> #{target}"
end

# Copy all image files
log "Copying image files..."
if Dir.exist?("templates/images")
  Dir.glob("templates/images/*").each do |file|
    target = "public/images/#{File.basename(file)}"
    FileUtils.cp(file, target)
    log "  - #{file} -> #{target}"
  end
end

# Create a .htaccess file for proper routing when using absolute paths
log "Creating .htaccess file..."
File.write("public/.htaccess", <<~HTACCESS)
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.html [L]
HTACCESS

# Fix tutorials.html directory issue if it exists
fix_tutorials_directory()

# Step 6: Fix any relative paths in HTML files
log "\n=== Fixing relative paths in HTML files ==="
Dir.glob("public/**/*.html").each do |file|
  # Skip if it's a directory
  next if File.directory?(file)
  
  begin
    content = File.read(file)
    
    # Replace relative CSS and JS paths with absolute ones
    updated_content = content
      .gsub(/href=["']\.\/(css|js|images)\//, 'href="/\1/') # href="./css/ -> href="/css/
      .gsub(/src=["']\.\/(css|js|images)\//, 'src="/\1/') # src="./js/ -> src="/js/
      
    if content != updated_content
      File.write(file, updated_content)
      log "  - Fixed paths in #{file}"
    end
  rescue => e
    log "  ! Error processing file #{file}: #{e.message}"
  end
end

# Step 7: Make sure the homepage is correctly named
if File.exist?("public/index.html")
  log "Homepage exists as index.html"
elsif File.exist?("public/home/index.html")
  log "Moving home/index.html to index.html"
  FileUtils.cp("public/home/index.html", "public/index.html")
end

# Step 8: Create posts.html redirecting to tutorials.html
log "Creating posts.html redirect to tutorials.html..."
File.write("public/posts.html", <<~HTML)
<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="refresh" content="0; url=/tutorials.html">
  <title>Redirecting to Tutorials</title>
</head>
<body>
  <p>Redirecting to <a href="/tutorials.html">tutorials</a>...</p>
</body>
</html>
HTML
log "  - Created posts.html redirecting to tutorials.html"

# Step 9: Copy all posts to a dedicated posts directory if needed
log "\n=== Setting up posts directory ==="
unless Dir.exist?("public/posts")
  FileUtils.mkdir_p("public/posts")
  log "Created directory: public/posts"
end

# Copy post files to posts directory with simplified names
Dir.glob("public/**/ruby-*.html").each do |file|
  # Skip if it's a directory
  next if File.directory?(file)
  
  filename = File.basename(file)
  target = "public/posts/#{filename}"
  
  unless File.exist?(target)
    FileUtils.cp(file, target)
    log "  - Copied #{file} -> #{target}"
  end
end

# Similarly for other posts like welcome
Dir.glob("public/**/welcome.html").each do |file|
  # Skip if it's a directory
  next if File.directory?(file)
  
  filename = File.basename(file)
  target = "public/posts/#{filename}"
  
  unless File.exist?(target)
    FileUtils.cp(file, target)
    log "  - Copied #{file} -> #{target}"
  end
end

# Step 10: Fix the tutorials page
log "\n=== Fixing tutorials page ==="

# Ensure the tutorials directory exists
unless Dir.exist?('public/tutorials')
  FileUtils.mkdir_p('public/tutorials')
  log "Created public/tutorials directory"
end

# Create a proper tutorials index page if needed
unless File.exist?('public/tutorials/index.html') && !File.directory?('public/tutorials/index.html')
  # Define the content for the tutorials page with correct links
  tutorials_content = <<~HTML
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ruby Tutorials - Ruby Learning</title>
  <meta name="description" content="Learn Ruby programming through tutorials and examples">
  <base href="/">
  <link rel="stylesheet" href="/css/style.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Fira+Sans:wght@400;500;700&family=JetBrains+Mono:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/css/prism-monokai.css">
  <link rel="stylesheet" href="/css/enhanced-code.css">
</head>
<body>
  <header class="site-header">
    <div class="container">
      <a href="/index.html" class="site-logo">
        <span class="logo-text">Ruby</span>
        <span class="logo-accent">Learning</span>
      </a>
      <nav class="site-nav">
        <ul>
          <li><a href="/index.html">Home</a></li>
          <li><a href="/pages/about/index.html">About</a></li>
          <li><a href="/tutorials/index.html">Tutorials</a></li>
          <li><a href="/pages/resources/index.html">Resources</a></li>
        </ul>
      </nav>
      <button class="menu-toggle" aria-label="Toggle menu">
        <span class="bar"></span>
        <span class="bar"></span>
        <span class="bar"></span>
      </button>
    </div>
  </header>
  
  <main class="site-content">
    <div class="container">
      <div class="page">
        <h1>Ruby Tutorials</h1>
        
        <p>Welcome to our curated list of Ruby tutorials. Here you'll find comprehensive guides to help you master Ruby programming.</p>
        
        <h2>Latest Tutorials</h2>
        
        <div class="tutorial-grid">
          <div class="tutorial-card">
            <h3><a href="/posts/2023-01-03-ruby-classes-and-objects/index.html">Understanding Ruby Classes and Objects</a></h3>
            <p>Learn about object-oriented programming in Ruby through classes and objects. Discover how Ruby implements OOP concepts elegantly.</p>
            <a href="/posts/2023-01-03-ruby-classes-and-objects/index.html" class="btn btn-small">Read Tutorial</a>
          </div>
          
          <div class="tutorial-card">
            <h3><a href="/posts/2023-01-02-ruby-examples/index.html">Ruby Code Examples</a></h3>
            <p>Practical code examples that demonstrate Ruby's capabilities and show real-world applications.</p>
            <a href="/posts/2023-01-02-ruby-examples/index.html" class="btn btn-small">Read Tutorial</a>
          </div>
          
          <div class="tutorial-card">
            <h3><a href="/posts/2023-01-01-welcome/index.html">Welcome to Ruby Learning</a></h3>
            <p>A warm welcome to the Ruby Learning site with an introduction to what you can expect to learn.</p>
            <a href="/posts/2023-01-01-welcome/index.html" class="btn btn-small">Read Tutorial</a>
          </div>
        </div>
        
        <h2>Coming Soon</h2>
        
        <ul>
          <li>Ruby Blocks, Procs, and Lambdas</li>
          <li>Introduction to Ruby Metaprogramming</li>
          <li>Working with Ruby Collections</li>
          <li>Ruby Web Development Basics</li>
          <li>Testing in Ruby with RSpec</li>
          <li>Ruby Gems and Bundler</li>
        </ul>
        
        <p>Stay tuned for more tutorials! We regularly update the site with new content.</p>
      </div>
    </div>
  </main>
  
  <footer class="site-footer">
    <div class="container">
      <div class="footer-grid">
        <div class="footer-about">
          <h3>Ruby Learning</h3>
          <p>A modern resource for learning the Ruby programming language through practical tutorials and examples.</p>
        </div>
        <div class="footer-links">
          <h3>Quick Links</h3>
          <ul>
            <li><a href="/index.html">Home</a></li>
            <li><a href="/pages/about/index.html">About</a></li>
            <li><a href="/tutorials/index.html">Tutorials</a></li>
            <li><a href="/pages/resources/index.html">Resources</a></li>
          </ul>
        </div>
        <div class="footer-resources">
          <h3>Ruby Resources</h3>
          <ul>
            <li><a href="https://ruby-lang.org" target="_blank">Ruby Official Site</a></li>
            <li><a href="https://ruby-doc.org" target="_blank">Ruby Documentation</a></li>
            <li><a href="https://rubygems.org" target="_blank">RubyGems</a></li>
          </ul>
        </div>
      </div>
      <div class="footer-bottom">
        <p>&copy; 2025 Ruby Learning. Built with Typophic.</p>
      </div>
    </div>
  </footer>

  <script src="/js/prism.js"></script>
  <script src="/js/prism-ruby.js"></script>
  <script src="/js/prism-markdown.js"></script>
  <script src="/js/code-enhancements.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const menuToggle = document.querySelector('.menu-toggle');
      const siteNav = document.querySelector('.site-nav');
      
      if (menuToggle) {
        menuToggle.addEventListener('click', function() {
          siteNav.classList.toggle('active');
          menuToggle.classList.toggle('active');
        });
      }

      if (typeof Prism !== 'undefined') {
        Prism.highlightAll();
      }
    });
  </script>
</body>
</html>
  HTML
  
  # Write the tutorials page
  File.write('public/tutorials/index.html', tutorials_content)
  log "Created tutorials/index.html with correct links"
end

# Fix the tutorials.html redirect if it exists as a directory
if Dir.exist?('public/tutorials.html')
  log "Found tutorials.html as a directory - fixing..."
  
  # Remove the problematic directory
  FileUtils.rm_rf('public/tutorials.html')
  
  # Create a redirect file
  redirect_content = <<~HTML
<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="refresh" content="0;url=/tutorials/">
  <title>Redirecting to Tutorials</title>
</head>
<body>
  <p>Redirecting to <a href="/tutorials/">tutorials</a>...</p>
</body>
</html>
  HTML
  
  File.write('public/tutorials.html', redirect_content)
  log "Replaced tutorials.html directory with redirect file"
else
  # Ensure the tutorials.html exists as a redirect
  File.write('public/tutorials.html', <<~HTML)
<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="refresh" content="0;url=/tutorials/">
  <title>Redirecting to Tutorials</title>
</head>
<body>
  <p>Redirecting to <a href="/tutorials/">tutorials</a>...</p>
</body>
</html>
  HTML
  log "Created/updated tutorials.html redirect file"
end

# Step 11: Fix all links
log "\n=== Fixing all links ==="

# Ensure all necessary directories exist
log "Ensuring all necessary directories exist..."
FileUtils.mkdir_p("public/posts/2023-01-01-welcome") unless Dir.exist?("public/posts/2023-01-01-welcome")
FileUtils.mkdir_p("public/posts/2023-01-02-ruby-examples") unless Dir.exist?("public/posts/2023-01-02-ruby-examples")
FileUtils.mkdir_p("public/posts/2023-01-03-ruby-classes-and-objects") unless Dir.exist?("public/posts/2023-01-03-ruby-classes-and-objects")
FileUtils.mkdir_p("public/pages/about") unless Dir.exist?("public/pages/about")
FileUtils.mkdir_p("public/pages/resources") unless Dir.exist?("public/pages/resources")
FileUtils.mkdir_p("public/pages/tutorials") unless Dir.exist?("public/pages/tutorials")

# Function to fix links in HTML files
def fix_links_in_file(file)
  begin
    content = File.read(file)
    original_content = content.dup
    
    # Fix post links
    # Pattern 1: /posts/ruby-examples.html -> /posts/2023-01-02-ruby-examples/index.html
    content.gsub!(/href=["']\/posts\/ruby-examples\.html["']/, 'href="/posts/2023-01-02-ruby-examples/index.html"')
    
    # Pattern 2: /posts/ruby-classes-and-objects.html -> /posts/2023-01-03-ruby-classes-and-objects/index.html
    content.gsub!(/href=["']\/posts\/ruby-classes-and-objects\.html["']/, 'href="/posts/2023-01-03-ruby-classes-and-objects/index.html"')
    
    # Pattern 3: /posts/welcome.html -> /posts/2023-01-01-welcome/index.html
    content.gsub!(/href=["']\/posts\/welcome\.html["']/, 'href="/posts/2023-01-01-welcome/index.html"')
    
    # Fix tutorials link
    content.gsub!(/href=["']\/tutorials\.html["']/, 'href="/tutorials/index.html"')
    
    # Fix about link
    content.gsub!(/href=["']\/about\.html["']/, 'href="/pages/about/index.html"')
    
    # Fix resources link
    content.gsub!(/href=["']\/resources\.html["']/, 'href="/pages/resources/index.html"')
    
    # Fix additional patterns for dated post links
    content.gsub!(/href=["']\/posts\/2023-01-03-ruby-classes-and-objects["']/, 'href="/posts/2023-01-03-ruby-classes-and-objects/index.html"')
    content.gsub!(/href=["']\/posts\/2023-01-02-ruby-examples["']/, 'href="/posts/2023-01-02-ruby-examples/index.html"')
    content.gsub!(/href=["']\/posts\/2023-01-01-welcome["']/, 'href="/posts/2023-01-01-welcome/index.html"')
    
    # Also fix relative links (without leading slash)
    content.gsub!(/href=["']posts\/ruby-examples\.html["']/, 'href="/posts/2023-01-02-ruby-examples/index.html"')
    content.gsub!(/href=["']posts\/ruby-classes-and-objects\.html["']/, 'href="/posts/2023-01-03-ruby-classes-and-objects/index.html"')
    content.gsub!(/href=["']posts\/welcome\.html["']/, 'href="/posts/2023-01-01-welcome/index.html"')
    
    if content != original_content
      File.write(file, content)
      log "  - Fixed links in: #{file}"
      return true
    end
  rescue => e
    log "  ! Error processing file #{file}: #{e.message}"
  end
  return false
end

# Fix links in all HTML files
fixed_files = 0
Dir.glob("public/**/*.html").each do |file|
  next if File.directory?(file)
  
  if fix_links_in_file(file)
    fixed_files += 1
  end
end

# Create redirect files for common URL patterns
log "Creating redirects for common URLs..."

# Define redirects
redirects = {
  "public/ruby-examples.html" => "/posts/2023-01-02-ruby-examples/index.html",
  "public/ruby-classes-and-objects.html" => "/posts/2023-01-03-ruby-classes-and-objects/index.html",
  "public/welcome.html" => "/posts/2023-01-01-welcome/index.html",
  "public/about.html" => "/pages/about/index.html",
  "public/resources.html" => "/pages/resources/index.html"
}

# Create redirect HTML files
redirects.each do |file_path, target_url|
  # Don't overwrite existing actual content files
  next if File.exist?(file_path) && !File.directory?(file_path)
  
  File.write(file_path, <<~HTML)
    <!DOCTYPE html>
    <html>
    <head>
      <meta http-equiv="refresh" content="0;url=#{target_url}">
      <title>Redirecting...</title>
    </head>
    <body>
      <p>Redirecting to <a href="#{target_url}">#{target_url}</a>...</p>
    </body>
    </html>
  HTML
  log "  - Created redirect: #{file_path} -> #{target_url}"
end

# Step 11: Fix unprocessed template variables in HTML files
log "\n=== Fixing unprocessed template variables ==="
fixed_files = 0

Dir.glob("public/**/*.html").each do |file|
  # Skip if it's a directory
  next if File.directory?(file)
  
  begin
    content = File.read(file)
    original_content = content.dup
    
    # Replace common template variables
    content.gsub!(/<%=\s*base_path\s*%>/, '')
    content.gsub!(/<%=\s*Time\.now\.year\s*%>/, Time.now.year.to_s)
    content.gsub!(/<%=\s*site\.name\s*%>/, 'Ruby Learning')
    content.gsub!(/<%=\s*page\.title\s*%>/, 'Page')
    content.gsub!(/<%=\s*page\.description\s*%>/, 'A Ruby Learning site')
    
    # Write back if changed
    if content != original_content
      File.write(file, content)
      fixed_files += 1
      log "  - Fixed template variables in: #{file}"
    end
  rescue => e
    log "  ! Error processing template variables in #{file}: #{e.message}"
  end
end

if fixed_files > 0
  log "  - Fixed template variables in #{fixed_files} files"
else
  log "  - No unprocessed template variables found"
end

# Create GitHub Pages specific files if building for deployment
if $options[:deploy]
  log "\n=== Creating GitHub Pages specific files ==="
  
  # Create a .nojekyll file
  File.write("public/.nojekyll", "")
  log "Created .nojekyll file"
  
  # Create a basic 404 page
  File.write("public/404.html", <<~HTML)
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <meta http-equiv="refresh" content="3;url=/">
      <title>Page Not Found</title>
      <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        h1 { color: #d9534f; }
        a { color: #0275d8; text-decoration: none; }
        a:hover { text-decoration: underline; }
      </style>
    </head>
    <body>
      <h1>Page Not Found</h1>
      <p>Sorry, the page you were looking for doesn't exist.</p>
      <p>You will be redirected to the <a href="/">homepage</a> in a few seconds.</p>
    </body>
    </html>
  HTML
  log "Created 404.html page"
end

log "\n=== Build complete! ===" 
log "Site is ready in the 'public' directory." 
log "Run 'bin/typophic-serve' to preview your site."
