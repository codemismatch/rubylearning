#!/usr/bin/env ruby

# Typophic: A flexible static site generator
#
# Usage: typophic [options]

require 'fileutils'
require 'yaml'
require 'optparse'
require 'date'

class Typophic
  def initialize(options = {})
    @source_dir = options[:source_dir] || 'content'
    @output_dir = options[:output_dir] || 'public'
    @template_dir = options[:template_dir] || 'templates'
    @data_dir = options[:data_dir] || 'data'
    @theme_dir = options[:theme_dir]
    
    # Use theme directory if specified
    @template_dir = @theme_dir if @theme_dir
    
    # Load site configuration
    @config = YAML.load_file('config.yml') rescue {}
  end
  
  def build
    puts "Building site..."
    
    # Clear output directory
    FileUtils.rm_rf(Dir.glob("#{@output_dir}/*"))
    
    # Copy static assets
    copy_static_assets
    
    # Process content files
    process_content_files
    
    puts "Site built successfully!"
  end
  
  private
  
  def copy_static_assets
    # Copy CSS, JS, and images to output directory
    ['css', 'js', 'images'].each do |asset_dir|
      if Dir.exist?("#{@template_dir}/#{asset_dir}")
        FileUtils.mkdir_p("#{@output_dir}/#{asset_dir}")
        Dir.glob("#{@template_dir}/#{asset_dir}/*").each do |file|
          FileUtils.cp(file, "#{@output_dir}/#{asset_dir}/")
          puts "Copied asset: #{file} to #{@output_dir}/#{asset_dir}/"
        end
      end
    end
  end
  
  def process_content_files
    # Process Markdown files
    Dir.glob("#{@source_dir}/**/*.md").each do |file|
      process_markdown_file(file)
    end
  end
  
  def process_markdown_file(file)
    # Read file content
    content = File.read(file)
    
    # Parse front matter
    if content =~ /\A---\n(.+?)\n---\n(.*)/m
      front_matter = YAML.safe_load($1) rescue {}
      markdown_content = $2
    else
      front_matter = {}
      markdown_content = content
    end
    
    # Determine output path
    rel_path = file.sub(/^#{@source_dir}\//, '').sub(/\.md$/, '')
    
    # Handle permalinks
    if front_matter['permalink']
      permalink = front_matter['permalink']
    elsif file.include?("/posts/") && front_matter['date']
      date = Date.parse(front_matter['date'].to_s)
      permalink = "/#{date.strftime('%Y/%m/%d')}/#{rel_path.sub('posts/', '')}"
    elsif File.basename(file) == 'index.md'
      # For index.md files, use the directory name as the permalink
      permalink = "/#{File.dirname(rel_path)}".sub(/\/home$/, '/')
    else
      permalink = "/#{rel_path}"
    end
    
    # Create output directory
    output_path = "#{@output_dir}#{permalink}/index.html"
    FileUtils.mkdir_p(File.dirname(output_path))
    
    # Render content
    html_content = render_markdown(markdown_content)
    
    # Apply layout
    layout = front_matter['layout'] || 'default'
    final_content = apply_layout(layout, html_content, front_matter)
    
    # Write output file
    File.write(output_path, final_content)
    puts "Generated: #{output_path}"
  end
  
  def render_markdown(content)
    # Simple Markdown to HTML conversion
    html = content.dup
    
    # Convert headers: # Header => <h1>Header</h1>
    html.gsub!(/^(#+)\s+(.+)$/) do
      level = $1.length
      "<h#{level}>#{$2}</h#{level}>"
    end
    
    # Convert code blocks - must be done before paragraphs
    html.gsub!(/```([a-z]*)\n(.+?)```/m) do
      lang = $1.empty? ? '' : " class=\"language-#{$1}\""
      code_content = $2.strip.gsub('<', '&lt;').gsub('>', '&gt;')
      "<pre><code#{lang}>#{code_content}</code></pre>"
    end
    
    # Convert paragraphs - skip lines that are already HTML or inside pre tags
    html = "<p>" + html + "</p>"
    html.gsub!(/<\/p>\s*\n+\s*<p>/, "</p>\n<p>")
    
    # Remove paragraph tags around HTML elements
    html.gsub!(/<p>(<\/?(?:h[1-6]|pre|ul|ol|li|div|p)[^>]*>)<\/p>/m, '\1')
    html.gsub!(/<p>\s*(<\/(?:h[1-6]|pre|ul|ol|li|div|p)>)\s*<\/p>/m, '\1')
    
    # Convert inline code
    html.gsub!(/`([^`]+)`/) do
      code_content = $1.gsub('<', '&lt;').gsub('>', '&gt;')
      "<code>#{code_content}</code>"
    end
    
    # Convert links
    html.gsub!(/\[([^\]]+)\]\(([^\)]+)\)/, "<a href=\"\\2\">\\1</a>")
    
    # Convert lists
    html.gsub!(/^- (.+)$/m, "<li>\\1</li>")
    html.gsub!(/<li>.+?(<\/li>)/m) do |match|
      "<ul>#{match}</ul>"
    end
    
    # Wrap in a div
    "<div class='markdown'>#{html}</div>"
  end
  
  def apply_layout(layout_name, content, page_data)
    # This method would apply a layout template to the content
    layout_path = "#{@template_dir}/layouts/#{layout_name}.html"
    
    if File.exist?(layout_path)
      layout_content = File.read(layout_path)
      
      # Check if this layout extends another layout
      if layout_content =~ /^---\nlayout: (.+?)\n---/
        parent_layout = $1
        layout_content = layout_content.sub(/^---\nlayout: .+?\n---\n/, '')
        
        # Replace content placeholder
        layout_content = layout_content.gsub('<%= content %>', content)
        
        # Apply parent layout
        return apply_layout(parent_layout, layout_content, page_data)
      else
        # Replace content placeholder
        result = layout_content.gsub('<%= content %>', content)
        
        # Replace page variables
        page_data.each do |key, value|
          result = result.gsub("<%= page.#{key} %>", value.to_s)
        end
        
        # Replace site variables
        @config.each do |key, value|
          result = result.gsub("<%= site.#{key} %>", value.to_s)
          result = result.gsub("<%= site.#{key} %>".downcase, value.to_s) # Case insensitive replacement
          # Also replace without the dot notation for backward compatibility
          result = result.gsub("<%= site_#{key} %>", value.to_s)
        end
        
        # Ensure site_name is properly replaced
        if @config['site_name']
          result = result.gsub("<%= site.name %>", @config['site_name'].to_s)
          result = result.gsub("<%= site_name %>", @config['site_name'].to_s)
        end
        
        # Convert any remaining Liquid/ERB syntax to proper ERB
        result = convert_liquid_to_erb(result, page_data)
        
        return result
      end
    else
      puts "Warning: Layout '#{layout_name}' not found"
      return content
    end
  end
  
  def convert_liquid_to_erb(content, page_data = {})
    # Process template using our simple template processor
    variables = {
      'site' => @config,
      'page' => page_data
    }
    
    # Create binding with site and page data
    site = @config
    page = page_data
    
    # Process common expressions
    content = content.gsub('<%= Time.now.year %>', Time.now.year.to_s)
    
    # Try to process any remaining ERB tags safely
    begin
      require 'erb'
      erb = ERB.new(content)
      # Create a binding with site and page variables
      b = binding
      return erb.result(b)
    rescue => e
      puts "Warning: Error processing ERB tags: #{e.message}"
      # Return the content with manual replacements as fallback
      return content
    end
  end
end

# Main program
if __FILE__ == $0
  # CLI options parser
  options = {}
  OptionParser.new do |opts|
    opts.banner = "Usage: typophic [options]"
    
    opts.on("-s", "--source DIR", "Source directory (default: 'content')") do |dir|
      options[:source_dir] = dir
    end
    
    opts.on("-o", "--output DIR", "Output directory (default: 'public')") do |dir|
      options[:output_dir] = dir
    end
    
    opts.on("-t", "--template DIR", "Templates directory (default: 'templates')") do |dir|
      options[:template_dir] = dir
    end
    
    opts.on("-d", "--data DIR", "Data directory (default: 'data')") do |dir|
      options[:data_dir] = dir
    end
    
    opts.on("--theme DIR", "Theme directory (overrides template dir)") do |dir|
      options[:theme_dir] = dir
    end
    
    opts.on("-w", "--watch", "Watch for changes and rebuild") do
      options[:watch] = true
    end
    
    opts.on("-h", "--help", "Show this help message") do
      puts opts
      exit
    end
  end.parse!

  # Initialize and build the site
  site = Typophic.new(options)
  site.build

  # Watch for changes if specified
  if options[:watch]
    puts "Watching for changes (Ctrl+C to stop)..."
    
    # This is a simple implementation that rebuilds the entire site
    # A more sophisticated implementation would only rebuild affected files
    loop do
      sleep 1
    end
  end
end
