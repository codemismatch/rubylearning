#!/usr/bin/env ruby

# Typophic-new: Initialize a new Typophic site
#
# Usage: typophic-new --name "Site Name" --type [blog|docs|ruby]

require 'fileutils'
require 'yaml'
require 'optparse'

class TypophicInit
  def initialize(options = {})
    @site_name = options[:site_name] || 'my-typophic-site'
    @site_dir = options[:site_dir] || @site_name
    @site_type = options[:site_type] || 'blog'
    @author = options[:author] || 'Typophic User'
    @description = options[:description] || 'A beautiful static website'
  end
  
  def initialize_site
    puts "Initializing Typophic: #{@site_name} (#{@site_type}) in directory: #{@site_dir}"
    
    # Create main directories
    create_directory_structure
    
    # Create config file
    create_config_file
    
    # Create sample content based on site type
    create_sample_content
    
    # Create templates
    create_templates
    
    # Add README file
    create_readme
    
    # Add site generator script (copy from bin directory)
    copy_scripts
    
    puts "\nSite initialized successfully!"
    puts "To build your site:"
    puts "  cd #{@site_dir}"
    puts "  bin/typophic"
  end
  
  private
  
  def create_directory_structure
    dirs = [
      @site_dir,
      "#{@site_dir}/bin",
      "#{@site_dir}/content",
      "#{@site_dir}/content/posts",
      "#{@site_dir}/content/pages",
      "#{@site_dir}/content/pages/home", 
      "#{@site_dir}/templates",
      "#{@site_dir}/templates/layouts",
      "#{@site_dir}/templates/includes",
      "#{@site_dir}/templates/css",
      "#{@site_dir}/templates/js",
      "#{@site_dir}/templates/images",
      "#{@site_dir}/data",
      "#{@site_dir}/public"
    ]
    
    dirs.each do |dir|
      FileUtils.mkdir_p(dir)
      puts "Created directory: #{dir}"
    end
  end
  
  def create_config_file
    config = {
      'site_name' => @site_name,
      'site_type' => @site_type,
      'author' => @author,
      'description' => @description,
      'url' => 'http://example.com',
      'permalink_style' => 'pretty',
      'date_format' => '%B %-d, %Y',
      'markdown_extensions' => ['tables', 'fenced_code_blocks', 'autolink']
    }
    
    File.write("#{@site_dir}/config.yml", config.to_yaml)
    puts "Created config file: #{@site_dir}/config.yml"
  end
  
  def create_sample_content
    # Create homepage
    File.write("#{@site_dir}/content/pages/home/index.md", <<~MARKDOWN)
      ---
      title: Home
      layout: home
      permalink: /
      ---

      # Welcome to #{@site_name}

      This is a static website built with Typophic, a flexible static site generator.

      ## Latest Content

      Check out the latest posts and updates.

      ## Get Started

      Learn more [about this site](/about) or browse the [posts](/posts).
    MARKDOWN
    
    # Create about page
    File.write("#{@site_dir}/content/pages/about.md", <<~MARKDOWN)
      ---
      title: About
      layout: page
      ---

      # About This Site

      This is a static website built with Typophic, a flexible static site generator.

      ## About the Author

      #{@author} is the creator of this site.

      ## Contact

      Feel free to reach out with any questions or comments.
    MARKDOWN
    
    # Create resources page
    File.write("#{@site_dir}/content/pages/resources.md", <<~MARKDOWN)
      ---
      title: Resources
      layout: page
      ---

      # Resources

      Here are some useful resources:

      ## Helpful Links

      - [Link 1](https://example.com) - Description
      - [Link 2](https://example.com) - Description
      - [Link 3](https://example.com) - Description

      ## More Information

      Contact us for more information.
    MARKDOWN
    
    # Create a welcome post
    File.write("#{@site_dir}/content/posts/2023-01-01-welcome.md", <<~MARKDOWN)
      ---
      title: Welcome to My Site
      layout: post
      date: 2023-01-01
      tags: [welcome, first-post]
      description: A warm welcome to my new site
      ---

      # Welcome!

      Thank you for visiting my site. This is the first post in what I hope will be a wonderful journey.

      ## What to Expect

      Here you'll find content about:

      - Topic 1
      - Topic 2
      - Topic 3

      Stay tuned for more!
    MARKDOWN
    
    # Create additional content based on site type
    case @site_type
    when 'docs'
      File.write("#{@site_dir}/content/pages/documentation.md", <<~MARKDOWN)
        ---
        title: Documentation
        layout: docs
        ---

        # Documentation

        Welcome to the documentation for this project.

        ## Table of Contents

        [TOC]

        ## Getting Started

        This section explains how to get started with the project.

        ## Advanced Usage

        This section covers more advanced topics.

        ## API Reference

        This section provides detailed API documentation.
      MARKDOWN
    when 'ruby'
      File.write("#{@site_dir}/content/posts/2023-01-02-ruby-examples.md", <<~MARKDOWN)
        ---
        title: Ruby Code Examples
        layout: post
        date: 2023-01-02
        tags: [ruby, code]
        ---

        # Ruby Code Examples

        Here are some Ruby code examples that you can use:

        ```ruby
        # A simple Ruby class
        class Person
          attr_accessor :name, :age
          
          def initialize(name, age)
            @name = name
            @age = age
          end
          
          def greet
            "Hello, my name is #{@name} and I am #{@age} years old."
          end
        end

        # Create a new person
        person = Person.new("Alice", 30)
        puts person.greet
        ```

        ## Interactive Example

        You can also run this code:

        ```ruby-exec
        class Calculator
          def add(a, b)
            a + b
          end
          
          def subtract(a, b)
            a - b
          end
        end

        calc = Calculator.new
        puts "10 + 5 = #{calc.add(10, 5)}"
        puts "10 - 5 = #{calc.subtract(10, 5)}"
        ```
      MARKDOWN
      
      File.write("#{@site_dir}/content/posts/2023-01-03-ruby-classes-and-objects.md", <<~MARKDOWN)
        ---
        title: Understanding Ruby Classes and Objects
        layout: post
        date: 2023-01-03
        tags: [ruby, oop, classes, objects]
        description: Learn about object-oriented programming in Ruby through classes and objects
        ---

        # Understanding Ruby Classes and Objects

        Object-oriented programming is one of Ruby's core paradigms. Let's explore how classes and objects work in Ruby.

        ## What is a Class?

        In Ruby, a class is a blueprint for creating objects. It defines the properties and behaviors that its instances (objects) will have.

        Here's a simple class definition:

        ```ruby
        class Book
          attr_accessor :title, :author, :pages
          
          def initialize(title, author, pages)
            @title = title
            @author = author
            @pages = pages
          end
          
          def to_s
            "#{@title} by #{@author} (#{@pages} pages)"
          end
          
          def read
            puts "You're reading #{@title}. Enjoy!"
          end
        end
        ```

        ## Creating Objects

        Once you have a class, you can create objects (instances of the class):

        ```ruby
        # Create new Book objects
        book1 = Book.new("The Ruby Programming Language", "Matz", 472)
        book2 = Book.new("Eloquent Ruby", "Russ Olsen", 448)

        # Access attributes
        puts book1.title   # => "The Ruby Programming Language"
        puts book2.author  # => "Russ Olsen"

        # Call methods
        puts book1         # => "The Ruby Programming Language by Matz (472 pages)"
        book2.read         # => "You're reading Eloquent Ruby. Enjoy!"
        ```
      MARKDOWN
    end
    
    puts "Created sample content based on site type: #{@site_type}"
  end
  
  def create_templates
    # Create base layout
    File.write("#{@site_dir}/templates/layouts/default.html", <<~HTML)
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title><%= page.title %> - <%= site.name %></title>
        <meta name="description" content="<%= page.description || site.description %>">
        <link rel="stylesheet" href="./css/style.css">
      </head>
      <body>
        <header>
          <div class="container">
            <h1><a href="./index.html"><%= site.name %></a></h1>
            <nav>
              <ul>
                <li><a href="./index.html">Home</a></li>
                <li><a href="./about.html">About</a></li>
                <li><a href="./posts.html">Posts</a></li>
                <li><a href="./resources.html">Resources</a></li>
              </ul>
            </nav>
          </div>
        </header>
        
        <main class="container">
          <%= content %>
        </main>
        
        <footer>
          <div class="container">
            <p>&copy; <%= Time.now.year %> <%= site.author %>. All rights reserved.</p>
            <p>Built with Typophic - A static site generator</p>
          </div>
        </footer>
      </body>
      </html>
    HTML
    
    # Create home layout
    File.write("#{@site_dir}/templates/layouts/home.html", <<~HTML)
      ---
      layout: default
      ---
      <div class="home">
        <section class="hero">
          <div class="hero-content">
            <%= content %>
          </div>
        </section>
        
        <section class="featured-posts">
          <h2>Recent Posts</h2>
          <div class="post-grid">
            <!-- This would be dynamically generated in a real implementation -->
            <div class="post-card">
              <h3><a href="./posts/2023-01-03-ruby-classes-and-objects.html">Understanding Ruby Classes and Objects</a></h3>
              <div class="post-date">January 3, 2023</div>
              <p>Learn about object-oriented programming in Ruby through classes and objects.</p>
              <div class="post-tags">
                <span class="tag">ruby</span>
                <span class="tag">oop</span>
              </div>
            </div>
            
            <div class="post-card">
              <h3><a href="./posts/2023-01-02-ruby-examples.html">Ruby Code Examples</a></h3>
              <div class="post-date">January 2, 2023</div>
              <p>Practical code examples that demonstrate Ruby's capabilities.</p>
              <div class="post-tags">
                <span class="tag">ruby</span>
                <span class="tag">code</span>
              </div>
            </div>
            
            <div class="post-card">
              <h3><a href="./posts/2023-01-01-welcome.html">Welcome to My Site</a></h3>
              <div class="post-date">January 1, 2023</div>
              <p>A warm welcome to this site.</p>
              <div class="post-tags">
                <span class="tag">welcome</span>
                <span class="tag">first-post</span>
              </div>
            </div>
          </div>
        </section>
      </div>
    HTML
    
    # Create post layout
    File.write("#{@site_dir}/templates/layouts/post.html", <<~HTML)
      ---
      layout: default
      ---
      <article class="post">
        <header class="post-header">
          <h1><%= page.title %></h1>
          <div class="post-meta">
            <time datetime="<%= page.date.strftime('%Y-%m-%d') %>">
              <%= page.date.strftime(site.date_format) %>
            </time>
            <% if page.tags && !page.tags.empty? %>
            <div class="tags">
              <% page.tags.each do |tag| %>
              <span class="tag"><a href="./tags/<%= tag %>.html"><%= tag %></a></span>
              <% end %>
            </div>
            <% end %>
          </div>
        </header>
        
        <div class="post-content">
          <%= content %>
        </div>
      </article>
    HTML
    
    # Create page layout
    File.write("#{@site_dir}/templates/layouts/page.html", <<~HTML)
      ---
      layout: default
      ---
      <div class="page">
        <%= content %>
      </div>
    HTML
    
    # Create docs layout if needed
    if @site_type == 'docs'
      File.write("#{@site_dir}/templates/layouts/docs.html", <<~HTML)
        ---
        layout: default
        ---
        <div class="docs">
          <div class="docs-sidebar">
            <h3>Documentation</h3>
            <ul>
              <li><a href="./documentation.html">Overview</a></li>
              <li><a href="./documentation/getting-started.html">Getting Started</a></li>
              <li><a href="./documentation/advanced.html">Advanced Usage</a></li>
              <li><a href="./documentation/api.html">API Reference</a></li>
            </ul>
          </div>
          <div class="docs-content">
            <%= content %>
          </div>
        </div>
      HTML
    end
    
    # Create CSS
    File.write("#{@site_dir}/templates/css/style.css", <<~CSS)
      /* Base styles */
      :root {
        --primary-color: #007bff;
        --secondary-color: #6c757d;
        --background-color: #ffffff;
        --text-color: #333333;
        --light-gray: #f8f9fa;
        --border-color: #dee2e6;
      }
      
      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }
      
      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        line-height: 1.6;
        color: var(--text-color);
        background-color: var(--background-color);
      }
      
      .container {
        width: 100%;
        max-width: 1140px;
        margin: 0 auto;
        padding: 0 15px;
      }
      
      /* Typography */
      h1, h2, h3, h4, h5, h6 {
        margin-bottom: 0.5em;
        font-weight: 500;
        line-height: 1.2;
      }
      
      h1 { font-size: 2.5rem; }
      h2 { font-size: 2rem; }
      h3 { font-size: 1.75rem; }
      h4 { font-size: 1.5rem; }
      
      p, ul, ol {
        margin-bottom: 1rem;
      }
      
      a {
        color: var(--primary-color);
        text-decoration: none;
      }
      
      a:hover {
        text-decoration: underline;
      }
      
      /* Header */
      header {
        background-color: var(--light-gray);
        padding: 1rem 0;
        margin-bottom: 2rem;
        border-bottom: 1px solid var(--border-color);
      }
      
      header .container {
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      
      header h1 {
        margin-bottom: 0;
        font-size: 1.5rem;
      }
      
      header h1 a {
        color: var(--text-color);
      }
      
      header h1 a:hover {
        text-decoration: none;
      }
      
      nav ul {
        display: flex;
        list-style: none;
        margin-bottom: 0;
      }
      
      nav li {
        margin-left: 1.5rem;
      }
      
      /* Main content */
      main {
        padding: 2rem 0;
      }
      
      /* Home page */
      .hero {
        background-color: #f0f0f0;
        padding: 3rem 0;
        margin-bottom: 2rem;
        border-radius: 8px;
        background-image: linear-gradient(135deg, rgba(0, 123, 255, 0.1), rgba(0, 123, 255, 0.05));
      }
      
      .hero-content {
        max-width: 800px;
        margin: 0 auto;
        padding: 0 20px;
      }
      
      .hero h1 {
        font-size: 2.8rem;
        margin-bottom: 1.5rem;
        color: var(--primary-color);
      }
      
      .hero p {
        font-size: 1.2rem;
      }
      
      .post-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
        margin-top: 1.5rem;
      }
      
      .post-card {
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 1.5rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }
      
      .post-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      }
      
      .post-card h3 {
        margin-top: 0;
        font-size: 1.4rem;
      }
      
      .post-date {
        color: var(--secondary-color);
        font-size: 0.9rem;
        margin-bottom: 0.75rem;
      }
      
      .post-tags {
        margin-top: 1rem;
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
      }
      
      .featured-posts {
        margin-bottom: 3rem;
      }
      
      .featured-posts h2 {
        border-bottom: 2px solid var(--primary-color);
        padding-bottom: 0.5rem;
        margin-bottom: 1.5rem;
      }
      
      /* Post */
      .post-header {
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid var(--border-color);
      }
      
      .post-meta {
        color: var(--secondary-color);
        margin-top: 0.5rem;
      }
      
      .tags {
        display: inline;
        margin-left: 1rem;
      }
      
      .tag {
        display: inline-block;
        background-color: var(--light-gray);
        padding: 0.2rem 0.5rem;
        border-radius: 4px;
        margin-right: 0.5rem;
        font-size: 0.85rem;
      }
      
      .post-content h2,
      .post-content h3 {
        margin-top: 2rem;
      }
      
      /* Code blocks */
      pre {
        background-color: var(--light-gray);
        border: 1px solid var(--border-color);
        border-radius: 4px;
        padding: 1rem;
        overflow-x: auto;
        margin-bottom: 1.5rem;
      }
      
      code {
        font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
        font-size: 0.9em;
        background-color: var(--light-gray);
        padding: 0.2em 0.4em;
        border-radius: 3px;
      }
      
      pre code {
        padding: 0;
        background-color: transparent;
      }
      
      /* Footer */
      footer {
        background-color: var(--light-gray);
        padding: 2rem 0;
        border-top: 1px solid var(--border-color);
        margin-top: 2rem;
        color: var(--secondary-color);
        font-size: 0.9rem;
      }
    CSS
    
    puts "Created template files"
  end
  
  def create_readme
    site_name = @site_name
    
    File.write("#{@site_dir}/README.md", <<~MARKDOWN)
      # #{site_name.gsub('-', ' ').split.map(&:capitalize).join(' ')}

      This is a static website built with Typophic, a flexible static site generator.

      ## Project Structure

      - `content/`: Your site content in Markdown format
        - `posts/`: Blog posts
        - `pages/`: Static pages
      - `templates/`: Site templates and assets
        - `layouts/`: HTML templates for different page types
        - `includes/`: Reusable template parts
        - `css/`: Stylesheets
        - `js/`: JavaScript files
        - `images/`: Image assets
      - `data/`: Data files in JSON or YAML format
      - `public/`: Generated site (don't edit directly)
      - `bin/`: Scripts for managing your site

      ## Getting Started

      1. Add or edit content in the `content` directory
      2. Customize the site appearance by editing templates and CSS
      3. Build the site:

      ```bash
      bin/typophic
      ```

      ## Building Options

      ```bash
      # Basic build
      bin/typophic

      # Specify custom directories
      bin/typophic --source content --output public --template templates

      # Use a theme
      bin/typophic --theme path/to/theme

      # Watch for changes (experimental)
      bin/typophic --watch
      ```

      ## Content Creation

      ### Front Matter

      Each Markdown file should start with YAML front matter:

      ```yaml
      ---
      title: Your Page Title
      layout: default  # Template to use
      date: 2023-01-01 # For blog posts
      tags: [tag1, tag2]
      description: A brief description
      ---
      ```

      ## Customization

      - Edit templates in `templates/layouts/`
      - Add custom CSS to `templates/css/style.css`
      - Modify site settings in `config.yml`
    MARKDOWN
    
    puts "Created README.md"
  end
  
  def copy_scripts
    # Copy the main typophic script to the new site's bin directory
    if File.exist?(File.join(File.dirname(__FILE__), 'typophic'))
      FileUtils.cp(File.join(File.dirname(__FILE__), 'typophic'), "#{@site_dir}/bin/typophic")
      FileUtils.chmod(0755, "#{@site_dir}/bin/typophic")
      puts "Copied typophic script to #{@site_dir}/bin/"
    else
      # If the script doesn't exist, create it from scratch
      typophic_script = File.read(__FILE__).split('__END__')[1] || ''
      if typophic_script.empty?
        puts "Warning: Could not find typophic script template. Creating a minimal version."
        typophic_script = <<~RUBY
          #!/usr/bin/env ruby
          
          puts "Please install the full typophic script for full functionality."
          puts "Visit: https://github.com/yourusername/typophic for more information."
        RUBY
      end
      
      File.write("#{@site_dir}/bin/typophic", typophic_script)
      FileUtils.chmod(0755, "#{@site_dir}/bin/typophic")
      puts "Created typophic script in #{@site_dir}/bin/"
    end
    
    # Create helper scripts
    
    # Build script
    File.write("#{@site_dir}/bin/build", <<~BASH)
      #!/bin/bash
      cd "\$(dirname "\$0")/.."
      bin/typophic "\$@"
    BASH
    FileUtils.chmod(0755, "#{@site_dir}/bin/build")
    
    # Serve script (using Python's built-in HTTP server)
    File.write("#{@site_dir}/bin/serve", <<~BASH)
      #!/bin/bash
      cd "\$(dirname "\$0")/.."
      bin/typophic "\$@"
      cd public
      echo "Starting server at http://localhost:8000"
      python -m http.server 8000
    BASH
    FileUtils.chmod(0755, "#{@site_dir}/bin/serve")
    
    # Deploy to GitHub Pages script
    File.write("#{@site_dir}/bin/deploy", <<~BASH)
      #!/bin/bash
      cd "\$(dirname "\$0")/.."
      bin/typophic
      
      echo "=== Preparing for GitHub Pages deployment ==="
      # Add .nojekyll file to prevent Jekyll processing
      touch public/.nojekyll
      
      # Initialize git repository in public directory if not already
      if [ ! -d "public/.git" ]; then
        echo "Initializing git repository in public directory..."
        cd public
        git init
        git checkout -b gh-pages  # GitHub Pages branch
      else
        echo "Git repository already exists in public directory"
        cd public
        # Make sure we're on the gh-pages branch
        git checkout gh-pages
      fi
      
      # Commit changes
      git add .
      git commit -m "Deploy site update on \$(date)"
      
      echo ""
      echo "=== Deployment prepared ==="
      echo "Your site is ready to be pushed to GitHub Pages."
      echo "If this is your first deployment, add your GitHub remote:"
      echo "  git remote add origin https://github.com/YOUR_USERNAME/REPO_NAME.git"
      echo ""
      echo "To push the changes:"
      echo "  git push -f origin gh-pages"
    BASH
    FileUtils.chmod(0755, "#{@site_dir}/bin/deploy")
    
    puts "Created helper scripts in #{@site_dir}/bin/"
  end
end

# Main program
if __FILE__ == $0
  # CLI options parser
  options = {}
  OptionParser.new do |opts|
    opts.banner = "Usage: typophic-new [options]"
    
    opts.on("-n", "--name NAME", "Site name (default: 'my-typophic-site')") do |name|
      options[:site_name] = name
    end
    
    opts.on("-d", "--dir DIRECTORY", "Output directory (default: same as site name)") do |dir|
      options[:site_dir] = dir
    end
    
    opts.on("-t", "--type TYPE", "Site type: blog, docs, ruby (default: blog)") do |type|
      if ['blog', 'docs', 'ruby'].include?(type)
        options[:site_type] = type
      else
        puts "Invalid site type: #{type}. Using default 'blog'."
      end
    end
    
    opts.on("-a", "--author NAME", "Site author name") do |name|
      options[:author] = name
    end
    
    opts.on("-desc", "--description TEXT", "Site description") do |text|
      options[:description] = text
    end
    
    opts.on("-h", "--help", "Show this help message") do
      puts opts
      exit
    end
  end.parse!

  # Initialize and run the site
  initializer = TypophicInit.new(options)
  initializer.initialize_site
end
